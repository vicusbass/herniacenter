---
import Logo from '../assets/logo.svg';
import Menu from '../assets/menu.svg';
import Close from '../assets/close.svg';

const menuItems = [
  { name: 'Spitalul', href: '/spital' },
  { name: 'Despre', href: '/despre' },
  { name: 'Interven»õii', href: '/interventii' },
  { name: 'Blog', href: '/blog' },
  { name: 'Contact', href: '/contact' },
];
---

<header class="border-custom bg-white sm:border-b">
  <!-- Top navigation bar -->
  <nav class="relative max-w-full px-4 sm:px-0">
    <div class="flex min-h-40 items-stretch">
      <div class="flex aspect-square w-[12.5%] flex-none items-center justify-center">
        <div class="flex h-12 w-12 items-center justify-center">
          <a href="/" class="block transition-transform duration-200 ease-in-out hover:scale-110"
            ><Logo /></a
          >
        </div>
      </div>

      <!-- Desktop Navigation - Spans 6 columns with flex layout -->
      <div class="border-custom hidden w-full border-r border-l sm:block">
        <div
          id="desktop-menu"
          class="menu-hidden hidden h-full flex-1 items-center justify-evenly space-x-4 sm:flex md:space-x-8"
        >
          {
            menuItems.map((item) => (
              <a
                href={item.href}
                class="rounded-md px-4 py-2 text-lg font-medium text-gray-800 transition-colors duration-200 hover:bg-gray-100 xl:text-xl 2xl:text-2xl"
              >
                {item.name}
              </a>
            ))
          }
        </div>
      </div>

      <!-- Empty spaces for mobile - spans 6 columns -->
      <div class="flex-1 sm:hidden"></div>

      <!-- Hamburger menu button -->
      <div class="border-custom flex aspect-square w-[12.5%] flex-none items-center justify-center">
        <button
          id="mobile-menu-toggle"
          class="relative flex min-h-[54px] min-w-[54px] items-center justify-center bg-(--color-primary)"
          aria-label="Toggle menu"
        >
          <div class="icon-container">
            <div class="menu-icon">
              <Menu />
            </div>
            <div class="close-icon">
              <Close />
            </div>
          </div>
        </button>
      </div>
    </div>
  </nav>
</header>

<!-- Full-screen Mobile Menu Modal -->
<div
  id="mobile-menu-modal"
  class="fixed inset-0 z-50 hidden bg-white"
  aria-labelledby="menu-title"
  role="dialog"
  aria-modal="true"
>
  <div class="relative flex h-full w-full flex-col items-center justify-center">
    <!-- Close Menu Button -->
    <button
      id="close-menu-button"
      class="absolute top-4 right-4 p-4 text-8xl font-bold text-gray-800 hover:text-gray-600"
      aria-label="Close menu"
    >
      &times;
    </button>

    <!-- Menu Content -->
    <div id="menu-content">
      <nav class="flex flex-col items-center space-y-8">
        {
          menuItems.map((item) => (
            <a
              href={item.href}
              class="menu-item text-4xl font-medium text-gray-800 transition-colors duration-200 hover:text-blue-600"
            >
              {item.name}
            </a>
          ))
        }
      </nav>
    </div>
  </div>
</div>

<style>
  .menu-item {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.4s ease-out,
      transform 0.4s ease-out;
  }

  .menu-item.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Icon container styles */
  .icon-container {
    position: relative;
    width: 24px;
    height: 24px;
  }

  .menu-icon,
  .close-icon {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transition:
      opacity 0.3s ease-in-out,
      transform 0.3s ease-in-out;
  }

  /* Initial state: Menu icon visible, Close icon hidden */
  .menu-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  .close-icon {
    opacity: 0;
    transform: rotate(90deg) scale(0.8);
  }

  /* Active state: Menu icon hidden, Close icon visible */
  .icon-container.active .menu-icon {
    opacity: 0;
    transform: rotate(-90deg) scale(0.8);
  }

  .icon-container.active .close-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  /* Desktop menu fade animation */
  #desktop-menu {
    transition: opacity 0.3s ease-in-out;
  }

  #desktop-menu.menu-hidden {
    opacity: 0;
    pointer-events: none;
  }
</style>

<script>
  function setupMenu() {
    const toggleButton = document.getElementById('mobile-menu-toggle');
    const closeButton = document.getElementById('close-menu-button');
    const modal = document.getElementById('mobile-menu-modal');
    const menuItems = document.querySelectorAll('.menu-item');
    const iconContainer = document.querySelector('.icon-container');
    const desktopMenu = document.getElementById('desktop-menu');

    let isMenuOpen = false;

    // Function to check if we're on a small screen or larger (sm breakpoint = 640px)
    const isLargeScreen = () => window.innerWidth >= 640;

    const openMobileMenu = () => {
      if (modal && iconContainer && !isLargeScreen()) {
        isMenuOpen = true;
        iconContainer.classList.add('active');
        modal.classList.remove('hidden');
        menuItems.forEach((item, index) => {
          setTimeout(
            () => {
              item.classList.add('visible');
            },
            (index + 1) * 50
          );
        });
      }
    };

    const closeMobileMenu = () => {
      if (modal && iconContainer && !isLargeScreen()) {
        isMenuOpen = false;
        iconContainer.classList.remove('active');
        modal.classList.add('hidden');
        menuItems.forEach((item) => {
          item.classList.remove('visible');
        });
      }
    };

    const toggleDesktopMenu = () => {
      if (desktopMenu && iconContainer && isLargeScreen()) {
        if (isMenuOpen) {
          isMenuOpen = false;
          iconContainer.classList.remove('active');
          desktopMenu.classList.add('menu-hidden');
        } else {
          isMenuOpen = true;
          iconContainer.classList.add('active');
          desktopMenu.classList.remove('menu-hidden');
        }
      }
    };

    const toggleMenu = () => {
      if (isLargeScreen()) {
        toggleDesktopMenu();
      } else {
        if (isMenuOpen) {
          closeMobileMenu();
        } else {
          openMobileMenu();
        }
      }
    };

    // Reset menu state on window resize
    const handleResize = () => {
      if (isLargeScreen()) {
        // On large screens, hide mobile modal and reset mobile state
        if (modal) {
          modal.classList.add('hidden');
        }
        menuItems.forEach((item) => {
          item.classList.remove('visible');
        });
        // Reset desktop menu visibility
        if (desktopMenu && isMenuOpen) {
          desktopMenu.classList.remove('menu-hidden');
        }
      } else {
        // On small screens, ensure desktop menu is visible and reset desktop state
        if (desktopMenu) {
          desktopMenu.classList.remove('menu-hidden');
        }
        // Reset mobile state if needed
        if (isMenuOpen && modal) {
          modal.classList.add('hidden');
        }
      }

      // Reset icon and menu state
      if (iconContainer) {
        iconContainer.classList.remove('active');
      }
      isMenuOpen = false;
    };

    if (toggleButton) {
      toggleButton.addEventListener('click', toggleMenu);
    }
    if (closeButton) {
      closeButton.addEventListener('click', closeMobileMenu);
    }

    // Listen for window resize to handle responsive behavior
    window.addEventListener('resize', handleResize);

    // Initial setup
    handleResize();
  }

  document.addEventListener('astro:page-load', setupMenu);
</script>
